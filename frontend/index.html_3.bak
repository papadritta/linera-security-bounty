<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Linera Security Bounty Platform</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            background: white;
            padding: 40px 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 30px;
            text-align: center;
        }
        .header-top {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            margin-bottom: 15px;
        }
        .logo-icon {
            width: 60px;
            height: 60px;
        }
        .header h1 {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 2.2em;
            font-weight: 700;
            margin: 0;
            letter-spacing: -0.5px;
        }
        .header .tagline {
            color: #666;
            font-size: 1.05em;
            margin: 12px 0 20px 0;
            font-weight: 400;
        }
        .header .credits {
            color: #888;
            font-size: 0.95em;
            padding-top: 20px;
            border-top: 2px solid #f0f0f0;
        }
        .header .credits a {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-decoration: none;
            font-weight: 700;
            transition: opacity 0.3s;
        }
        .header .credits a:hover {
            opacity: 0.8;
        }
        .social-links {
            display: flex;
            gap: 12px;
            justify-content: center;
            align-items: center;
            margin-top: 12px;
        }
        .social-links a {
            color: #667eea;
            text-decoration: none;
            font-weight: 600;
            padding: 10px 18px;
            border-radius: 8px;
            background: #f8f9fa;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.9em;
        }
        .social-links a:hover {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }
        .error {
            background: #ff6b6b;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: 600;
        }
        .success {
            background: #51cf66;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: 600;
        }
        .card {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 30px;
        }
        .card h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.7em;
            font-weight: 700;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 600;
            font-size: 0.95em;
        }
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1em;
            font-family: 'Inter', sans-serif;
            transition: border-color 0.3s;
        }
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        .form-group textarea {
            min-height: 100px;
            resize: vertical;
        }
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 1em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            font-family: 'Inter', sans-serif;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        .bounty-list, .submission-list {
            display: grid;
            gap: 20px;
        }
        .bounty-item, .submission-item {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #667eea;
            transition: transform 0.2s;
        }
        .bounty-item:hover, .submission-item:hover {
            transform: translateX(5px);
        }
        .bounty-item h3, .submission-item h3 {
            color: #333;
            margin-bottom: 10px;
            font-weight: 700;
        }
        .bounty-item p, .submission-item p {
            color: #666;
            margin-bottom: 5px;
        }
        .badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 0.85em;
            font-weight: 700;
            margin-right: 10px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .badge-low { background: #51cf66; color: white; }
        .badge-medium { background: #ffd43b; color: #333; }
        .badge-high { background: #ff8787; color: white; }
        .badge-critical { background: #ff6b6b; color: white; }
        .badge-pending { background: #868e96; color: white; }
        .badge-approved { background: #51cf66; color: white; }
        .badge-rejected { background: #ff6b6b; color: white; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-top">
                <svg class="logo-icon" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
                            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
                            <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
                        </linearGradient>
                    </defs>
                    <circle cx="50" cy="50" r="48" fill="url(#grad1)" opacity="0.1"/>
                    <path d="M 30 40 L 50 25 L 70 40 L 70 60 L 50 75 L 30 60 Z" fill="url(#grad1)"/>
                    <path d="M 40 45 L 50 38 L 60 45 L 60 55 L 50 62 L 40 55 Z" fill="white"/>
                </svg>
                <h1>Linera Security Bounty Platform</h1>
            </div>
            <p class="tagline">Real-time smart contract audit bounty platform on Linera microchains</p>
            <div class="credits">
                Built by <a href="https://github.com/papadritta" target="_blank">@papadritta</a>
                <div class="social-links">
                    <a href="https://github.com/papadritta" target="_blank">
                        <svg width="18" height="18" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"/>
                        </svg>
                        GitHub
                    </a>
                    <a href="https://x.com/papadritta" target="_blank">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                        </svg>
                        Twitter
                    </a>
                    <a href="https://discord.com/users/214964573059547136" target="_blank">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515a.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0a12.64 12.64 0 0 0-.617-1.25a.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057a19.9 19.9 0 0 0 5.993 3.03a.078.078 0 0 0 .084-.028a14.09 14.09 0 0 0 1.226-1.994a.076.076 0 0 0-.041-.106a13.107 13.107 0 0 1-1.872-.892a.077.077 0 0 1-.008-.128a10.2 10.2 0 0 0 .372-.292a.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127a12.299 12.299 0 0 1-1.873.892a.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028a19.839 19.839 0 0 0 6.002-3.03a.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.956-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.955-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.946 2.418-2.157 2.418z"/>
                        </svg>
                        Discord
                    </a>
                </div>
            </div>
        </div>

        <div id="errors"></div>
        <div id="success"></div>

        <div class="card">
            <h2>Create New Bounty</h2>
            <form id="createBountyForm">
                <div class="form-group">
                    <label>Contract Address</label>
                    <input type="text" id="contractAddress" placeholder="0x..." required>
                </div>
                <div class="form-group">
                    <label>Reward Pool (tokens)</label>
                    <input type="number" id="rewardPool" value="10000" min="1" required>
                </div>
                <div class="form-group">
                    <label>Minimum Severity</label>
                    <select id="minSeverity" required>
                        <option value="LOW">Low</option>
                        <option value="MEDIUM" selected>Medium</option>
                        <option value="HIGH">High</option>
                        <option value="CRITICAL">Critical</option>
                    </select>
                </div>
                <button type="submit" class="btn">Create Bounty</button>
            </form>
        </div>

        <div class="card">
            <h2>Submit Vulnerability</h2>
            <form id="submitVulnForm">
                <div class="form-group">
                    <label>Bounty ID</label>
                    <input type="number" id="bountyId" value="0" min="0" required>
                </div>
                <div class="form-group">
                    <label>Title</label>
                    <input type="text" id="vulnTitle" placeholder="Reentrancy Attack" required>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea id="vulnDescription" placeholder="Detailed description of the vulnerability..." required></textarea>
                </div>
                <div class="form-group">
                    <label>Severity</label>
                    <select id="vulnSeverity" required>
                        <option value="LOW">Low</option>
                        <option value="MEDIUM">Medium</option>
                        <option value="HIGH" selected>High</option>
                        <option value="CRITICAL">Critical</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Proof of Concept</label>
                    <textarea id="proofOfConcept" placeholder="Code or steps to reproduce..." required></textarea>
                </div>
                <button type="submit" class="btn">Submit Vulnerability</button>
            </form>
        </div>

        <div class="card">
            <h2>Active Bounties</h2>
            <div id="bountyList" class="bounty-list">Loading...</div>
        </div>

        <div class="card">
            <h2>Vulnerability Submissions</h2>
            <div id="submissionList" class="submission-list">Loading...</div>
        </div>
    </div>

    <script>
        const GRAPHQL_ENDPOINT = 'http://localhost:8080/chains/2171c7fa1f2df0d9679b88abed58710eb00b0f4fa352ed4355a324d2f9d01037/applications/82f548f5ad4023458d43185717dbcc6a4c64629291c3acbbf9e43115c5a15c55';

        function showError(message) {
            const errorDiv = document.getElementById('errors');
            errorDiv.innerHTML = `<div class="error">${message}</div>`;
            setTimeout(() => errorDiv.innerHTML = '', 5000);
        }

        function showSuccess(message) {
            const successDiv = document.getElementById('success');
            successDiv.innerHTML = `<div class="success">${message}</div>`;
            setTimeout(() => successDiv.innerHTML = '', 5000);
        }

        async function graphqlQuery(query, variables = {}) {
            try {
                const response = await fetch(GRAPHQL_ENDPOINT, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query, variables })
                });
                const result = await response.json();
                if (result.errors) {
                    throw new Error(result.errors[0].message);
                }
                return result.data;
            } catch (error) {
                showError(`GraphQL Error: ${error.message}`);
                throw error;
            }
        }

        async function loadBounties() {
            const query = `
                query {
                    bounties {
                        id
                        contractAddress
                        rewardPool
                        remainingPool
                        minSeverity
                        active
                    }
                }
            `;
            const data = await graphqlQuery(query);
            const bountyList = document.getElementById('bountyList');
            
            if (!data.bounties || data.bounties.length === 0) {
                bountyList.innerHTML = '<p style="color: #666;">No bounties yet. Create one above!</p>';
                return;
            }

            bountyList.innerHTML = data.bounties.map(b => `
                <div class="bounty-item">
                    <h3>Bounty #${b.id}</h3>
                    <p><strong>Contract:</strong> ${b.contractAddress}</p>
                    <p><strong>Reward Pool:</strong> ${b.rewardPool} tokens (${b.remainingPool} remaining)</p>
                    <p>
                        <span class="badge badge-${b.minSeverity.toLowerCase()}">${b.minSeverity}</span>
                        <span class="badge ${b.active ? 'badge-approved' : 'badge-rejected'}">${b.active ? 'Active' : 'Closed'}</span>
                    </p>
                </div>
            `).join('');
        }

        async function loadSubmissions() {
            const query = `
                query {
                    submissions {
                        id
                        bountyId
                        title
                        severity
                        status
                        payoutAmount
                    }
                }
            `;
            const data = await graphqlQuery(query);
            const submissionList = document.getElementById('submissionList');
            
            if (!data.submissions || data.submissions.length === 0) {
                submissionList.innerHTML = '<p style="color: #666;">No submissions yet. Submit a vulnerability above!</p>';
                return;
            }

            submissionList.innerHTML = data.submissions.map(s => `
                <div class="submission-item">
                    <h3>${s.title}</h3>
                    <p><strong>Submission #${s.id}</strong> for Bounty #${s.bountyId}</p>
                    <p>
                        <span class="badge badge-${s.severity.toLowerCase()}">${s.severity}</span>
                        <span class="badge badge-${s.status.toLowerCase()}">${s.status}</span>
                    </p>
                    ${s.payoutAmount > 0 ? `<p><strong>Payout:</strong> ${s.payoutAmount} tokens</p>` : ''}
                </div>
            `).join('');
        }

        document.getElementById('createBountyForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const mutation = `
                mutation($contractAddress: String!, $rewardPool: String!, $minSeverity: Severity!) {
                    createBounty(
                        contractAddress: $contractAddress
                        rewardPool: $rewardPool
                        minSeverity: $minSeverity
                    )
                }
            `;
            try {
                await graphqlQuery(mutation, {
                    contractAddress: document.getElementById('contractAddress').value,
                    rewardPool: document.getElementById('rewardPool').value,
                    minSeverity: document.getElementById('minSeverity').value
                });
                showSuccess('Bounty created successfully!');
                e.target.reset();
                setTimeout(() => loadBounties(), 1000);
            } catch (error) {
                console.error('Error creating bounty:', error);
            }
        });

        document.getElementById('submitVulnForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const mutation = `
                mutation($bountyId: String!, $title: String!, $description: String!, $severity: Severity!, $proofOfConcept: String!) {
                    submitVulnerability(
                        bountyId: $bountyId
                        title: $title
                        description: $description
                        severity: $severity
                        proofOfConcept: $proofOfConcept
                    )
                }
            `;
            try {
                await graphqlQuery(mutation, {
                    bountyId: document.getElementById('bountyId').value,
                    title: document.getElementById('vulnTitle').value,
                    description: document.getElementById('vulnDescription').value,
                    severity: document.getElementById('vulnSeverity').value,
                    proofOfConcept: document.getElementById('proofOfConcept').value
                });
                showSuccess('Vulnerability submitted successfully!');
                e.target.reset();
                setTimeout(() => loadSubmissions(), 1000);
            } catch (error) {
                console.error('Error submitting vulnerability:', error);
            }
        });

        // Load data on page load
        loadBounties();
        loadSubmissions();

        // Refresh every 5 seconds
        setInterval(() => {
            loadBounties();
            loadSubmissions();
        }, 5000);
    </script>
</body>
</html>