<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Linera Security Bounty Platform</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 30px;
            text-align: center;
        }
        .header h1 {
            color: #667eea;
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        .header p {
            color: #666;
            font-size: 1.1em;
        }
        .error {
            background: #ff6b6b;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .success {
            background: #51cf66;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .card {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 30px;
        }
        .card h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.8em;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 600;
        }
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1em;
            transition: border-color 0.3s;
        }
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        .form-group textarea {
            min-height: 100px;
            resize: vertical;
        }
        .btn {
            background: #667eea;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 1em;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
        }
        .btn:hover {
            background: #5568d3;
        }
        .bounty-list, .submission-list {
            display: grid;
            gap: 20px;
        }
        .bounty-item, .submission-item {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }
        .bounty-item h3, .submission-item h3 {
            color: #333;
            margin-bottom: 10px;
        }
        .bounty-item p, .submission-item p {
            color: #666;
            margin-bottom: 5px;
        }
        .badge {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.9em;
            font-weight: 600;
            margin-right: 10px;
        }
        .badge-low { background: #51cf66; color: white; }
        .badge-medium { background: #ffd43b; color: #333; }
        .badge-high { background: #ff8787; color: white; }
        .badge-critical { background: #ff6b6b; color: white; }
        .badge-pending { background: #868e96; color: white; }
        .badge-approved { background: #51cf66; color: white; }
        .badge-rejected { background: #ff6b6b; color: white; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ”’ Linera Security Bounty Platform</h1>
            <p>Real-time smart contract audit bounty platform on Linera microchains</p>
        </div>

        <div id="errors"></div>
        <div id="success"></div>

        <div class="card">
            <h2>Create New Bounty</h2>
            <form id="createBountyForm">
                <div class="form-group">
                    <label>Contract Address</label>
                    <input type="text" id="contractAddress" placeholder="0x..." required>
                </div>
                <div class="form-group">
                    <label>Reward Pool (tokens)</label>
                    <input type="number" id="rewardPool" value="10000" min="1" required>
                </div>
                <div class="form-group">
                    <label>Minimum Severity</label>
                    <select id="minSeverity" required>
                        <option value="LOW">Low</option>
                        <option value="MEDIUM" selected>Medium</option>
                        <option value="HIGH">High</option>
                        <option value="CRITICAL">Critical</option>
                    </select>
                </div>
                <button type="submit" class="btn">Create Bounty</button>
            </form>
        </div>

        <div class="card">
            <h2>Submit Vulnerability</h2>
            <form id="submitVulnForm">
                <div class="form-group">
                    <label>Bounty ID</label>
                    <input type="number" id="bountyId" value="0" min="0" required>
                </div>
                <div class="form-group">
                    <label>Title</label>
                    <input type="text" id="vulnTitle" placeholder="Reentrancy Attack" required>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea id="vulnDescription" placeholder="Detailed description of the vulnerability..." required></textarea>
                </div>
                <div class="form-group">
                    <label>Severity</label>
                    <select id="vulnSeverity" required>
                        <option value="LOW">Low</option>
                        <option value="MEDIUM">Medium</option>
                        <option value="HIGH" selected>High</option>
                        <option value="CRITICAL">Critical</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Proof of Concept</label>
                    <textarea id="proofOfConcept" placeholder="Code or steps to reproduce..." required></textarea>
                </div>
                <button type="submit" class="btn">Submit Vulnerability</button>
            </form>
        </div>

        <div class="card">
            <h2>Active Bounties</h2>
            <div id="bountyList" class="bounty-list">Loading...</div>
        </div>

        <div class="card">
            <h2>Vulnerability Submissions</h2>
            <div id="submissionList" class="submission-list">Loading...</div>
        </div>
    </div>

    <script>
        const GRAPHQL_ENDPOINT = 'http://localhost:8080/chains/2171c7fa1f2df0d9679b88abed58710eb00b0f4fa352ed4355a324d2f9d01037/applications/82f548f5ad4023458d43185717dbcc6a4c64629291c3acbbf9e43115c5a15c55';

        function showError(message) {
            const errorDiv = document.getElementById('errors');
            errorDiv.innerHTML = `<div class="error">${message}</div>`;
            setTimeout(() => errorDiv.innerHTML = '', 5000);
        }

        function showSuccess(message) {
            const successDiv = document.getElementById('success');
            successDiv.innerHTML = `<div class="success">${message}</div>`;
            setTimeout(() => successDiv.innerHTML = '', 5000);
        }

        async function graphqlQuery(query, variables = {}) {
            try {
                const response = await fetch(GRAPHQL_ENDPOINT, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query, variables })
                });
                const result = await response.json();
                if (result.errors) {
                    throw new Error(result.errors[0].message);
                }
                return result.data;
            } catch (error) {
                showError(`GraphQL Error: ${error.message}`);
                throw error;
            }
        }

        async function loadBounties() {
            const query = `
                query {
                    bounties {
                        id
                        contractAddress
                        rewardPool
                        remainingPool
                        minSeverity
                        active
                    }
                }
            `;
            const data = await graphqlQuery(query);
            const bountyList = document.getElementById('bountyList');
            
            if (!data.bounties || data.bounties.length === 0) {
                bountyList.innerHTML = '<p style="color: #666;">No bounties yet. Create one above!</p>';
                return;
            }

            bountyList.innerHTML = data.bounties.map(b => `
                <div class="bounty-item">
                    <h3>Bounty #${b.id}</h3>
                    <p><strong>Contract:</strong> ${b.contractAddress}</p>
                    <p><strong>Reward Pool:</strong> ${b.rewardPool} tokens (${b.remainingPool} remaining)</p>
                    <p>
                        <span class="badge badge-${b.minSeverity.toLowerCase()}">${b.minSeverity}</span>
                        <span class="badge ${b.active ? 'badge-approved' : 'badge-rejected'}">${b.active ? 'Active' : 'Closed'}</span>
                    </p>
                </div>
            `).join('');
        }

        async function loadSubmissions() {
            const query = `
                query {
                    submissions {
                        id
                        bountyId
                        title
                        severity
                        status
                        payoutAmount
                    }
                }
            `;
            const data = await graphqlQuery(query);
            const submissionList = document.getElementById('submissionList');
            
            if (!data.submissions || data.submissions.length === 0) {
                submissionList.innerHTML = '<p style="color: #666;">No submissions yet. Submit a vulnerability above!</p>';
                return;
            }

            submissionList.innerHTML = data.submissions.map(s => `
                <div class="submission-item">
                    <h3>${s.title}</h3>
                    <p><strong>Submission #${s.id}</strong> for Bounty #${s.bountyId}</p>
                    <p>
                        <span class="badge badge-${s.severity.toLowerCase()}">${s.severity}</span>
                        <span class="badge badge-${s.status.toLowerCase()}">${s.status}</span>
                    </p>
                    ${s.payoutAmount > 0 ? `<p><strong>Payout:</strong> ${s.payoutAmount} tokens</p>` : ''}
                </div>
            `).join('');
        }

        document.getElementById('createBountyForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const mutation = `
                mutation($contractAddress: String!, $rewardPool: String!, $minSeverity: Severity!) {
                    createBounty(
                        contractAddress: $contractAddress
                        rewardPool: $rewardPool
                        minSeverity: $minSeverity
                    )
                }
            `;
            try {
                await graphqlQuery(mutation, {
                    contractAddress: document.getElementById('contractAddress').value,
                    rewardPool: document.getElementById('rewardPool').value,
                    minSeverity: document.getElementById('minSeverity').value
                });
                showSuccess('Bounty created successfully!');
                e.target.reset();
                setTimeout(() => loadBounties(), 1000);
            } catch (error) {
                console.error('Error creating bounty:', error);
            }
        });

        document.getElementById('submitVulnForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const mutation = `
                mutation($bountyId: String!, $title: String!, $description: String!, $severity: Severity!, $proofOfConcept: String!) {
                    submitVulnerability(
                        bountyId: $bountyId
                        title: $title
                        description: $description
                        severity: $severity
                        proofOfConcept: $proofOfConcept
                    )
                }
            `;
            try {
                await graphqlQuery(mutation, {
                    bountyId: document.getElementById('bountyId').value,
                    title: document.getElementById('vulnTitle').value,
                    description: document.getElementById('vulnDescription').value,
                    severity: document.getElementById('vulnSeverity').value,
                    proofOfConcept: document.getElementById('proofOfConcept').value
                });
                showSuccess('Vulnerability submitted successfully!');
                e.target.reset();
                setTimeout(() => loadSubmissions(), 1000);
            } catch (error) {
                console.error('Error submitting vulnerability:', error);
            }
        });

        // Load data on page load
        loadBounties();
        loadSubmissions();

        // Refresh every 5 seconds
        setInterval(() => {
            loadBounties();
            loadSubmissions();
        }, 5000);
    </script>
</body>
</html>